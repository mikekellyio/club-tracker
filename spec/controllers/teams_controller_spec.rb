require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe TeamsController, :type => :controller do
  before do
    sign_in
    [Club, Team].map &:delete_all
  end

  # This should return the minimal set of attributes required to create a valid
  # Team. As you add validations to Team, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {name: "team 1"}
  }

  let(:invalid_attributes) {
    {invalid: :invalid}
  }

  let(:club) { Club.create name: "sparks"}

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TeamsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all teams as @teams" do
      team = club.teams.create! valid_attributes
      get :index, {club_id: club.id}, valid_session
      expect(assigns(:teams)).to eq([team])
    end
  end

  describe "GET show" do
    it "assigns the requested team as @team" do
      team = club.teams.create! valid_attributes
      get :show, {club_id: club.id, :id => team.to_param}, valid_session
      expect(assigns(:team)).to eq(team)
    end
  end

  describe "GET new" do
    it "assigns a new team as @team" do
      get :new, {club_id: club.id, }, valid_session
      expect(assigns(:team)).to be_a_new(Team)
    end
  end

  describe "GET edit" do
    it "assigns the requested team as @team" do
      team = club.teams.create! valid_attributes
      get :edit, {club_id: club.id, :id => team.to_param}, valid_session
      expect(assigns(:team)).to eq(team)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Team" do
        expect {
          post :create, {club_id: club.id, :team => valid_attributes}, valid_session
        }.to change {club.reload.teams.count}.by(1)
      end

      it "assigns a newly created team as @team" do
        post :create, {club_id: club.id, :team => valid_attributes}, valid_session
        expect(assigns(:team)).to be_a(Team)
        expect(assigns(:team)).to be_persisted
      end

      it "redirects to the created team" do
        post :create, {club_id: club.id, :team => valid_attributes}, valid_session
        expect(response).to redirect_to(club_team_url(club, club.reload.teams.last))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved team as @team" do
        post :create, {club_id: club.id, :team => invalid_attributes}, valid_session
        expect(assigns(:team)).to be_a_new(Team)
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested team" do
        team = club.teams.create! valid_attributes
        put :update, {club_id: club.id, :id => team.to_param, :team => new_attributes}, valid_session
        team.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested team as @team" do
        team = club.teams.create! valid_attributes
        put :update, {club_id: club.id, :id => team.to_param, :team => valid_attributes}, valid_session
        expect(assigns(:team)).to eq(team)
      end

      it "redirects to the team" do
        team = club.teams.create! valid_attributes
        put :update, {club_id: club.id, :id => team.to_param, :team => valid_attributes}, valid_session
        expect(response).to redirect_to(club_team_url(club, team))
      end
    end

    describe "with invalid params" do
      it "assigns the team as @team" do
        team = club.teams.create! valid_attributes
        put :update, {club_id: club.id, :id => team.to_param, :team => invalid_attributes}, valid_session
        expect(assigns(:team)).to eq(team)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested team" do
      team = club.teams.create! valid_attributes
      expect {
        delete :destroy, {club_id: club.id, :id => team.to_param}, valid_session
      }.to change {club.reload.teams.count}.by(-1)
    end

    it "redirects to the teams list" do
      team = club.teams.create! valid_attributes
      delete :destroy, {club_id: club.id, :id => team.to_param}, valid_session
      expect(response).to redirect_to(club_teams_url(club))
    end
  end

end
